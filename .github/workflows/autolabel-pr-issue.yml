name: Auto Label PR from Linked Issue

on:
  pull_request_target: 
    types: [opened, edited, synchronize, reopened]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  label-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Extract Issue Numbers from PR Body
        id: extract-issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const prBody = context.payload.pull_request.body || '';
            const prTitle = context.payload.pull_request.title || '';
            const patterns = [
              /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi,
              /#(\d+)/g
            ];
            const issueNumbers = new Set();
            const textToSearch = prBody + ' ' + prTitle;
            patterns.forEach(pattern => {
              const matches = [...textToSearch.matchAll(pattern)];
              matches.forEach(match => {
                if (/^\d+$/.test(match[1])) issueNumbers.add(match[1]);
              });
            });
            return JSON.stringify([...issueNumbers]);

      - name: Get Labels from Linked Issues
        id: get-labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const issueNumbers = JSON.parse('${{ steps.extract-issues.outputs.result }}');
            const excludedLabels = ['recode', 'hacktoberfest-accepted'];
            const allLabels = new Set();

            for (const issueNumber of issueNumbers) {
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                for (const label of issue.data.labels) {
                  if (!excludedLabels.includes(label.name.toLowerCase()))
                    allLabels.add(label.name);
                }
              } catch (error) {
                console.log(`Could not fetch issue #${issueNumber}:`, error.message);
              }
            }

            return JSON.stringify([...allLabels]);

      - name: Apply Labels to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = JSON.parse('${{ steps.get-labels.outputs.result }}')
              .filter(l => typeof l === 'string' && l.trim() !== '');
            if (labels.length === 0) {
              console.log('No labels to apply');
              return;
            }
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels
            });
            console.log(`Applied labels: ${labels.join(', ')}`);
