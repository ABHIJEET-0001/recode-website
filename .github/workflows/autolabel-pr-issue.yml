name: Sync Issue Metadata to PR

on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened]

permissions:
  pull-requests: write
  issues: write
  contents: read
  repository-projects: write

jobs:
  sync-pr-metadata:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Extract linked issues from PR
      - name: Extract linked issue(s) from PR
        id: extract-issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title || '';
            const prBody = context.payload.pull_request.body || '';

            const patterns = [
              /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi,
              /#(\d+)/g
            ];

            const issueNumbers = new Set();
            const text = prTitle + ' ' + prBody;

            for (const pattern of patterns) {
              for (const match of text.matchAll(pattern)) {
                issueNumbers.add(match[1]);
              }
            }

            core.setOutput('issues', JSON.stringify(Array.from(issueNumbers)));
            core.setOutput('pr', prNumber.toString());

      # Step 3: Sync issue metadata to PR
      - name: Sync Issue Metadata to PR
        if: steps.extract-issues.outputs.issues != '' && steps.extract-issues.outputs.issues != '[]'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issuesOutput = '${{ steps.extract-issues.outputs.issues }}';
            const prNumber = parseInt('${{ steps.extract-issues.outputs.pr }}');

            let issues = [];
            try {
              issues = JSON.parse(issuesOutput);
            } catch (e) {
              console.error("Failed to parse issues:", issuesOutput);
            }

            if (!issues || issues.length === 0) {
              console.log("No linked issues found");
              return;
            }

            for (const issueNumber of issues) {
              try {
                // Fetch issue details
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });

                console.log(`Syncing metadata from Issue #${issueNumber} to PR #${prNumber}`);

                // --- Sync Labels ---
                const issueLabels = issue.labels.map(l => l.name);
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                const currentPRLabels = pr.labels.map(l => l.name);
                const combinedLabels = Array.from(new Set([...currentPRLabels, ...issueLabels]));

                if (combinedLabels.length > 0) {
                  await github.rest.issues.setLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    labels: combinedLabels
                  });
                  console.log(`Labels applied: ${combinedLabels.join(', ')}`);
                }

                // --- Sync Milestone ---
                if (issue.milestone) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    milestone: issue.milestone.number
                  });
                  console.log(`Milestone synced: ${issue.milestone.title}`);
                }

                // --- Optionally add comment on PR ---
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `âœ… Synchronized metadata from Issue #${issueNumber}:\n- Labels: ${issueLabels.length > 0 ? issueLabels.join(', ') : 'None'}\n- Milestone: ${issue.milestone ? issue.milestone.title : 'None'}`
                });

              } catch (error) {
                console.error(`Error syncing issue #${issueNumber} to PR #${prNumber}:`, error.message);
              }
            }
